Set-StrictMode -Version 3.0
$ErrorActionPreference = "Stop"

{{- $winget_packages := list -}}
{{- range .software_groups }}
  {{- $groupPackages := index $.packages.winget . -}}
  {{- if $groupPackages }}
    {{- $winget_packages = concat $winget_packages $groupPackages -}}
  {{- end }}
{{- end }}

#region Winget packages
{{ $winget_list := (output "cmd" "/C" "winget export -s winget -o %TEMP%\\winget_list && type %TEMP%\\winget_list") -}}
{{ range $winget_packages -}}
{{   if not (contains . $winget_list) -}}
        Write-Host Installing winget package '{{ .}}'
        winget install `
          --scope user --exact --source winget --id {{ . }} `
          --accept-source-agreements `
          --accept-package-agreements `
          --silent `
          --disable-interactivity
{{   end -}}
{{ end }}
#endregion


{{- if has "tool" .software_groups }}
$installDir = "C:\Program Files\KeePassXC"
$currentPath = [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::User)

if ($currentPath -notlike "*$installDir*") {
    $newPath = $currentPath + ";" + $installDir
    [Environment]::SetEnvironmentVariable("Path", $newPath, [EnvironmentVariableTarget]::User)
}
{{- end }}

#region Shells installation
{{- if has "powershell" .shells }}
winget install `
    --scope user --exact --source winget --id Microsoft.PowerShell `
    --accept-source-agreements `
    --accept-package-agreements `
    --silent `
    --disable-interactivity
{{- end }}

{{- if has "nushell" .shells }}
winget install `
    --scope user --exact --source winget --id Nushell.Nushell `
    --accept-source-agreements `
    --accept-package-agreements `
    --silent `
    --disable-interactivity

$config = "$env:USERPROFILE\.config\"
[Environment]::SetEnvironmentVariable("XDG_CONFIG_HOME", $config, [EnvironmentVariableTarget]::User)
{{- end }}
#endregion

# xmake can't be installed like the other packages, because if it installed like the others, xrepo
# isn't available.
{{- if has "dev" .software_groups }}
winget install --id Xmake-io.Xmake --interactive
{{ end }}

# If in Windows PowerShell (Desktop edition), remove any PS7 paths
# used to install PSFzf module correctly in and get it working in both PS5.1 and PS7.
if ($PSVersionTable.PSEdition -eq 'Desktop') {
    $mydocuments = [environment]::getfolderpath("mydocuments")
    $userPath = Join-Path $mydocuments 'Documents\WindowsPowerShell\Modules'

    $programFiles = "$env:ProgramFiles\WindowsPowerShell\Modules"
    $systemPath   = "$env:WINDIR\System32\WindowsPowerShell\v1.0\Modules"

    $origPSModulePath = $Env:PSModulePath

    # Set PSModulePath to match a normal PS 5.1 session
    $Env:PSModulePath = "$userPath;$programFiles;$systemPath"

# Install PSFzf module for fuzzy finding in PowerShell
    Import-Module PackageManagement
    Import-Module PowerShellGet
    Install-Module -Name PSFzf -Scope CurrentUser -Force

    # restore the original module path so PSReadLine can load
    $Env:PSModulePath = $origPSModulePath
}

$pwshPath = "$env:ProgramFiles\PowerShell\7\pwsh.exe"
if (Test-Path $pwshPath) {
    Write-Host "Installing PSFzf for PowerShell 7..."
    & $pwshPath -NoProfile -Command "Install-Module -Name PSFzf -Force -Scope CurrentUser"
}