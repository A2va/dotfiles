
module utils {
    export def show_color [color: string, msg: string] {
		let colors = {
			red: "\e[31m"
			blue: "\e[36m"
		}
		let reset = "\e[0m"
		print $"($colors | get $color)($msg)($reset)"
	}
}
use utils *

def --env scr [
  language?: string,
  name?: string
] {

    let version = "v9"
    let supported = [rust c cpp java gradle python scala md]
    let java_version = 21

    mut language = $language

    if $language == "-v" {
        print $"Nushell script ($version) installed."
        return
    }

    if 'SCR_TMP_FOLDER' not-in $env  {
        show_color red "Error: You must define SCR_TMP_FOLDER as a valid directory."
        show_color blue 'Example: $env.SCR_TMP_FOLDER = "/tmp/scratch_projects"'
        return
    }

    if ($language | is-empty) {
        $language = $supported | input list "Select Language"
        if ($language | is-empty) { 
            return 
        }
    }

    if not ($language in $supported) {
        show_color red $"Error: '($language)' is not supported. Choose one of: ($supported | str join ', ')"
        return
    }

    let base_folder = $env.SCR_TMP_FOLDER

    mut project_name = $name
    if ($name | is-empty) == false {
        if (ls $name | is-empty) == false {
            show_color red $"Path '($name)' already exists. Aborting to prevent overwrite."
            return
        }
    } else {
        let timestamp = (date now | format date "%Y-%m-%d-%H%M%S")
        let name_gen = $"scratch-($language)-($timestamp)"
        $project_name = $name_gen
    }

    show_color blue $"Creating scratch project for '($language)' in folder '($project_name)'..."
    let final = $base_folder | path join $project_name
    mut entry = ""

    match $language {
        "rust" => {
            mkdir $final and cd $final
            ^cargo init --vcs none
            $entry = "src/main.rs"
        }
        "md" => {
            cd $base_folder
            $entry = $"($project_name).md"
            touch $entry
        }
        "c" => {
            mkdir $final and cd $final
            xmake create -l c -P .
            $entry = "src/main.c"
        }
        "cpp" => {
            mkdir $final and cd $final
            xmake create -l c++ -P .
            $entry = "src/main.cpp"
        }
        "java" => {
            mkdir $final and cd $final
            $entry = "App.java"
            '{{ template "scr/App.java.tmpl" . }}' | save --force $entry
        }
        "python" => {
            mkdir $final and cd $final
            $entry = "main.py"
            '{{ template "scr/main.py.tmpl" . }}' | save --force $entry
        }
        "gradle" => {
            mkdir $final and cd $final
            (
                ^gradle init
                --type java-application
                --dsl kotlin
                --test-framework junit-jupiter
                --package scratch
                --project-name scratch
                --no-split-project
                --no-incubating
                --java-version $java_version
            )
            $entry = "app/src/main/java/scratch/App.java"
        }
        "scala" => {
            mkdir $final and cd $final
            $entry = "Main.scala"
            '{{ template "scr/Main.scala.tmpl" . }}' | save --force $entry
            '{{ template "scr/scalafmt.conf.tmpl" . }}' | save --force ".scalafmt.conf"
        }
    }

    if 'SCR_EDITOR' not-in $env  {
        show_color red "Scratch project created, but SCR_EDITOR is not set."
        show_color blue 'Example: $env.SCR_EDITOR = "code .; code"'
    } else {
        ^($env.SCR_EDITOR) $entry
    }
}
