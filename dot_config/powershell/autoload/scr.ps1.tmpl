function scr {
    param (
        [string]$Language,
        [string]$Name,

        [Alias('v')]
        [switch]$Version,

        [Alias('h', 'help')]
        [switch]$ShowHelp,
    )

    $scriptVersion = "v9"
    $DEFINITION = "scr $scriptVersion - Generate scratch project in various languages based on simple templates or generators"
    $SCR_SUPPORTED = @("rust", "c", "cpp", "java", "gradle", "python", "scala", "md")
    $JAVA_VERSION = 21

    function Show-Version {
        Write-Host "PowerShell script $scriptVersion installed."
    }

    function Show-Help {
        Write-Host "`n$DEFINITION" -ForegroundColor Cyan
        Write-Host "Synopsis: scr [-v|-h|--help] [template name] [destination]" -ForegroundColor Blue
        Write-Host "Configure scr with SCR_TMP_FOLDER and SCR_EDITOR" -ForegroundColor Green
        Write-Host
        Write-Host "Configure scr with SCR_TMP_FOLDER and SCR_EDITOR"
        Show-PowerShellCommand '$env:SCR_TMP_FOLDER = ~/path/somewhere # choose a folder where the scratch projects will be generated'
        Show-PowerShellCommand '$env:SCR_TMP_FOLDER . # SCR_TMP_FOLDER can the the current folder if you like it'
        Show-PowerShellCommand '$env:SCR_EDITOR = \"nvim\" # configure the editor to open the main file'
        Show-PowerShellCommand '$env:SCR_EDITOR = \"code . && code\" # Same with VSCode: it opens the folder in VSCode and open the main file'
        Show-PowerShellCommand '$env:SCR_EDITOR = $EDITOR # reusing the $EDITOR value'
        Write-Host
        Write-Host "Pick the given template" -ForegroundColor Green
        Show-PowerShellCommand "scr rust # Create a new cargo project"
        Show-PowerShellCommand "scr c # Create a hello world in main.c"
        Show-PowerShellCommand "scr cpp # Create a hello world in main.cpp"
        Show-PowerShellCommand "scr python # Create a simple hello world main.py"
        Show-PowerShellCommand "scr java # Create a single App.java with hello world"
        Show-PowerShellCommand "scr gradle # Create a Java project using Gradle (gradle init)"
        Show-PowerShellCommand "scr scala # Create a single Main.scala with hello world"
    }

    function Show-PowerShellCommand {
        param(
            [Parameter(Mandatory)]
            [string]$Command
        )

        # ANSI color codes
        $ColorCmdlet = "`e[96m" # bright cyan
        $ColorParam = "`e[93m" # yellow
        $ColorString = "`e[92m" # green
        $ColorVar = "`e[95m" # magenta
        $ColorNumber = "`e[94m" # blue
        $ColorComment = "`e[90m" # grey
        $Reset = "`e[0m"

        # Separate code and comment
        $parts = $Command -split '#', 2
        $code = $parts[0]
        $comment = if ($parts.Count -gt 1) { $parts[1] } else { $null }

        # Highlight: basic regex-based replacements
        $highlighted = $code `
			-replace '(\b[A-Za-z]+\-[A-Za-z]+\b)', "$ColorCmdlet`$1$Reset" ` # Cmdlets
			-replace '(\s-\w+)', "$ColorParam`$1$Reset" `   # Parameters
			-replace '("[^"]*"|''[^'']*'')', "$ColorString`$1$Reset" ` # Strings
			-replace '(\$[A-Za-z_]\w*)', "$ColorVar`$1$Reset" ` # Variables
			-replace '(\b\d+(\.\d+)?\b)', "$ColorNumber`$1$Reset" # Numbers

        # Print highlighted code
        Write-Host -NoNewline $highlighted

        # Print comment if present
        if ($comment) {
            Write-Host "$ColorComment# $comment$Reset"
        }
        else {
            Write-Host ""
        }
    }
    
    function Save-File {
        param (
            [string]$Content,
            [string]$Path
        )
        Set-Content -Path $Path -Value $Content -Encoding UTF8
    }

    # Pre-check if language looks like a flag
    if ($Language -and $Language.StartsWith('--')) {
        switch ($Language.ToLower()) {
            '--help' { $ShowHelpDoubleDash = $true; $Language = $null }
            '--version' { $VersionDoubleDash = $true; $Language = $null }
            default { }
        }
    }


    if ($ShowHelp.IsPresent -or $ShowHelpDoubleDash) {
        Show-Help
        return
    }
        
    if ($Version.IsPresent -or $VersionDoubleDash) {
        Show-Version
        return
    }


    if (-not $Env:SCR_TMP_FOLDER) {
        Write-Host "Error: You must define SCR_TMP_FOLDER as a valid directory." -ForegroundColor Red
        Write-Host 'Example: $Env:SCR_TMP_FOLDER = "C:\scratch_projects"' -ForegroundColor Cyan
        return
    }

    if (-not $Language) {
        Write-Host "Choose a language:"
        $Language = $SCR_SUPPORTED | Out-GridView -Title "Select Language" -OutputMode Single
        if (-not $Language) { return }
    }

    if (-not ($SCR_SUPPORTED -contains $Language)) {
        Write-Host "Error: '$Language' is not supported. Choose one of: $($SCR_SUPPORTED -join ', ')" -ForegroundColor Red
        return
    }

    $BaseFolder = $Env:SCR_TMP_FOLDER
    if ($Name) {
        if (Test-Path $Name) {
            Write-Host "Path '$Name' already exists. Aborting to prevent overwrite." -ForegroundColor Red
            return
        }
        else {
            $BaseFolder = Get-Location
            $ProjectName = $Name
        }
    }
    else {
        $timestamp = Get-Date -Format "yyyy-MM-dd-HHmmss"
        $ProjectName = "scratch-$Language-$timestamp"
    }

    Write-Host "Creating scratch project for '$Language' in folder '$ProjectName'..." -ForegroundColor Cyan
    $Final = Join-Path -Path $BaseFolder -ChildPath $ProjectName
    $entry = ""

    switch ($Language) {
        "rust" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            cargo init --vcs none
            $entry = "src/main.rs"
        }
        "md" {
            Set-Location $BaseFolder
            $entry = "$ProjectName.md"
            Save-File "# Markdown Scratch File" $entry
        }
        "c" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            xmake create -l c -P .
            $entry = "src/main.c"
        }
        "cpp" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            xmake create -l c++ -P .
            $entry = "src/main.cpp"
        }
        "java" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            $entry = "App.java"
            Save-File '{{ template "scr/App.java.tmpl" . }}' $entry
        }
        "python" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            $entry = "main.py"
            Save-File '{{ template "scr/main.py.tmpl" . }}' $entry
        }
        "gradle" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            & gradle init `
                --type java-application `
                --dsl kotlin `
                --test-framework junit-jupiter `
                --package scratch `
                --project-name scratch `
                --no-split-project `
                --no-incubating `
                --java-version $JAVA_VERSION
            $entry = "app/src/main/java/scratch/App.java"
        }
        "scala" {
            New-Item -ItemType Directory -Path $Final | Out-Null
            Set-Location $Final
            $entry = "Main.scala"
            Save-File '{{ template "scr/Main.scala.tmpl" . }}' $entry
            Save-File '{{ template "scr/scalafmt.conf.tmpl" . }}' ".scalafmt.conf"
        }
    }

    if (-not $Env:SCR_EDITOR) {
        Write-Host "Scratch project created, but SCR_EDITOR is not set." -ForegroundColor Red
        Write-Host 'Example: $Env:SCR_EDITOR = "code .; code"' -ForegroundColor Cyan
    }
    else {
        Invoke-Expression "$Env:SCR_EDITOR $entry"
    }
}
