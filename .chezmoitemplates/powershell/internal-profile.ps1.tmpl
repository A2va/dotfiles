# Internal powershell profile for handling completion

{{ $wingetLinksPath := joinPath .chezmoi.homeDir "AppData" "Local" "Microsoft" "WinGet" "Links"}}

$env:STARSHIP_CONFIG = "$HOME\.config\starship.toml"

# chezmoi managed externals
if ($env:Path -notlike "*\.local\bin*") {
    $env:Path += ";$env:USERPROFILE\.local\bin"
}

{{ if or (findExecutable "starship" (list (joinPath $wingetLinksPath "starship.exe"))) (lookPath "starship") }}
# https://github.com/starship/starship/issues/2057#issuecomment-831336770
&"starship" init powershell --print-full-init | Out-String | Invoke-Expression
{{- end }}

# chezmoi completion
{{ completion "powershell" }}

# carapace completion
{{ if or (stat (joinPath $wingetLinksPath "carapace.exe")) (lookPath "carapace") }}

# carapace is not usable under powershell v5.1
if($PSVersionTable.PSVersion.Major -ge 7) {
    $env:CARAPACE_BRIDGES = 'inshellisense'
    Set-PSReadLineOption -Colors @{ "Selection" = "`e[7m" }
    Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete
    carapace _carapace | Out-String | Invoke-Expression
}
{{- end }}


{{ if or (stat (joinPath $wingetLinksPath "fzf.exe")) (lookPath "fzf") }}
Set-PsFzfOption -PSReadlineChordProvider 'Ctrl+t' -PSReadlineChordReverseHistory 'Ctrl+r'
{{- end }}

# zoxide completion
{{ if or (stat (joinPath $wingetLinksPath "zoxide.exe")) (lookPath "zoxide") }}
Invoke-Expression (& { (zoxide init powershell | Out-String) })
filter __zoxide_escapeStringWithSpecialChars {
    $_ -replace '\s|#|@|\$|;|,|''|\{|\}|\(|\)|"|`|\||<|>|&','`$&'
}

# Harcode z for now until PR https://github.com/ajeetdsouza/zoxide/pull/1052 is merged
Register-ArgumentCompleter -Native -CommandName "z" -ScriptBlock {
    param(
        $WordToComplete,
        $CommandAst,
        $CursorPosition
    )

    # Get the current command line and convert into a string
    $Command = $CommandAst.CommandElements
    $Command = "$Command"

    # The user could have moved the cursor backwards on the command-line.
    # We only show completions when the cursor is at the end of the line
    if ($Command.Length -gt $CursorPosition) {
        return
    }

    $Program,$Arguments = $Command.Split(" ",2)

    # If we don't have any parameter, just use the default completion (Which is Set-Location)
    if([string]::IsNullOrEmpty($Arguments)) {
        return
    }

    $QueryArgs = $Arguments.Split(" ")

    # If the last parameter is complete (there is a space following it)
    if ($WordToComplete -eq "" -And ( -Not $IsEqualFlag )) {
        # Normally, we would invoke the interactive query. Unfortunally it is not possible to invoke an
        # interactive command in a powershell argument completer. Therefore, we just return in that case to the
        # default completion strategy.
        # zoxide query -i -- @QueryArgs
        return
    } else {
        $result = zoxide query --exclude "$(__zoxide_pwd)" -l -- @QueryArgs
    }

    $result | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($($_ | __zoxide_escapeStringWithSpecialChars), "$($_)", 'ParameterValue', "$($_)")
    }
}
{{ end }}


# xmake completion
{{ if or (stat `C:\Program Files\xmake\xmake.exe`) (lookPath "xmake") }}
# PowerShell parameter completion for xmake
Register-ArgumentCompleter -Native -CommandName xmake -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $complete = "$wordToComplete"
    if (-not $commandName) {
        $complete = $complete + " "
    }
    $oldenv = $env:XMAKE_SKIP_HISTORY
    $env:XMAKE_SKIP_HISTORY = 1
    $results = xmake lua "private.utils.complete" $cursorPosition "nospace-json" "$complete" | ConvertFrom-Json | Sort-Object -Property value
    $results | ForEach-Object {
        $hasdesc = [bool] $_.psobject.Properties['description']
        if ($hasdesc) {
            $desc = " - $($_.description)"
        } else {
            $desc = ""
        }
        [System.Management.Automation.CompletionResult]::new($_.value, "$($_.value)$desc", 'ParameterValue', $_.value)
    }
    $env:XMAKE_SKIP_HISTORY = $oldenv
}

# PowerShell parameter completion for xrepo
Register-ArgumentCompleter -Native -CommandName xrepo -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $complete = "$wordToComplete"
    if (-not $commandName) {
        $complete = $complete + " "
    }
    $oldenv = $env:XMAKE_SKIP_HISTORY
    $env:XMAKE_SKIP_HISTORY = 1
    $results = xmake lua "private.xrepo.complete" $cursorPosition "nospace-json" "$complete" | ConvertFrom-Json | Sort-Object -Property value
    $results | ForEach-Object {
        $hasdesc = [bool] $_.psobject.Properties['description']
        if ($hasdesc) {
            $desc = " - $($_.description)"
        } else {
            $desc = ""
        }
        [System.Management.Automation.CompletionResult]::new($_.value, "$($_.value)$desc", 'ParameterValue', $_.value)
    }
    $env:XMAKE_SKIP_HISTORY = $oldenv
}
{{ end }}